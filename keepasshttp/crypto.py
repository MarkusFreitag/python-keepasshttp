"""Submodule of keepasshttp, providing basic crypto functions."""
import base64
import os

from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

from keepasshttp import util


KEY_SIZE = 32  # this is in bytes
IV_SIZE = 16
PAD_SIZE = 128  # in bits


def pad(data, size=PAD_SIZE):
    """Pad a datagram.

    size is in bits; 16 bytes = 128 bits

    Args:
        data (str): datagram
        size (int): PAD_SIZE
    Returns:
        str: padded datagram
    """
    padder = padding.PKCS7(size).padder()
    padded_data = padder.update(data)
    return padded_data + padder.finalize()


def unpad(padded_data, size=PAD_SIZE):
    """Unpad a datagram.

    size is in bits; 16 bytes = 128 bits

    Args:
        data (str): padded datagram
        size (int): PAD_SIZE
    Returns:
        str: unpadded datagram
    """
    unpadder = padding.PKCS7(size).unpadder()
    data = unpadder.update(padded_data)
    return data + unpadder.finalize()


def get_cipher(key, iv):
    """Get a new pair of ciphers.

    Args:
        key (byte): enc key
        iv (byte): enc IV
    Returns:
        object: new Cipher object
    """
    backend = default_backend()
    return Cipher(
        algorithms.AES(base64.b64decode(key)),
        modes.CBC(base64.b64decode(iv)),
        backend
    )


def encrypt(data, key, iv):
    """Encrypt a datagram.

    Args:
        data (str): datagram
        key (byte): enc key
        iv (byte): enc IV
    Returns:
        str: encrypted datagram
    """
    cipher = get_cipher(key, iv)
    encryptor = cipher.encryptor()
    p = pad(data)
    res = encryptor.update(p) + encryptor.finalize()
    return base64.b64encode(res)


def decrypt(data, key, iv):
    """Decrypt a datagram.

    Args:
        data (str): encrypted datagram
        key (byte): enc key
        iv (byte): enc IV
    Returns:
        str: decrypted datagram
    """
    cipher = get_cipher(key, iv)
    decryptor = cipher.decryptor()
    padded_data = decryptor.update(base64.b64decode(data)) + decryptor.finalize()
    return unpad(padded_data)


def get_random_bytes(size):
    """Generate random bytes.

    Args:
        size (int): size of bytes to generate
    Returns:
        bytes: random generated bytes
    """
    return base64.b64encode(os.urandom(size))


def get_random_key():
    """Generate a new random key.

    Returns:
        bytes: generated key
    """
    return get_random_bytes(KEY_SIZE)


def get_random_iv():
    """Generate a new random iv.

    Returns:
        bytes: generated iv
    """
    return get_random_bytes(IV_SIZE)


def encrypt_dict(dct, key, iv):
    """Encrypt all values of a dict.

    Args:
        dct (dict): dict based datagram
        key (byte): enc key
        iv (byte): enc IV
    Returns:
        str: encrypted dict
    """
    def _encrypt(v):
        return encrypt(v, key, iv)
    return util.json_map(_encrypt, dct)


def decrypt_dict(encrypted_dict, key, iv):
    """Decrypt all values of a dict.

    Args:
        encrypted_dict (dict): encrypted dict
        key (byte): enc key
        iv (byte): enc IV
    Returns:
        str: dict based datagram
    """
    def _decrypt(v):
        return decrypt(v, key, iv)
    return util.json_map(_decrypt, encrypted_dict)
